@page "/personas"
@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize]

@using ABM.DTOs
@using ABM.Services
@using Microsoft.AspNetCore.Authorization

<button type="button" class="btn btn-secondary ms-2" @onclick="ShowCreateForm">Agregar Persona</button>
@if ((isCreating || isEditing) && _persona is not null)
{
    <EditForm Model="@_persona" OnValidSubmit="SavePersona">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger" />

        @if (isEditing)
        {
            <div class="mb-3">
                <label class="form-label">ID</label>
                <InputNumber class="form-control" @bind-Value="_persona.Id" readonly />
            </div>
        }

        <div class="mb-3">
            <label class="form-label">Nombre</label>
            <InputText class="form-control" @bind-Value="_persona.Nombre" />
        </div>

        <div class="mb-3">
            <label class="form-label">DNI</label>
            <InputNumber class="form-control" @bind-Value="_persona.DNI" />
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha de Nacimiento</label>
            <InputDate class="form-control" @bind-Value="_persona.FechaNacimiento" />
        </div>

        <button type="submit" class="btn btn-primary">
            @(isCreating ? "Crear Persona" : "Guardar Cambios")
        </button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="CancelForm">Cancelar</button>
    </EditForm>
}


@if (_personas==null)
{
        <Loader/>       
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>DNI</th>
                <th>Nombre</th>
                <th>Fecha Nacimiento</th>
                <th>Acciones disponibles </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var persona in _personas)
            {
                <tr>
                    <td>@persona.Id</td>
                    <td>@persona.DNI</td>
                    <td>@persona.Nombre</td>
                    <td>@persona.FechaNacimiento?.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-outline-primary btn-sm border-3" @onclick="() => ShowEditForm(persona.Id)">
                            <i class="fa-solid fa-edit"></i> Editar
                        </button>
                        <button class="btn btn-danger btn-sm border-3" @onclick="() => eliminar(persona.Id)">
                            <i class="fa-solid fa-trash"></i> Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [SupplyParameterFromForm]
    private Persona _persona { get; set; }
    private List<Persona> _personas { get; set; } = new();
    [Inject] private PersonaService _service { get; set; }


    private bool isEditing = false;
    private bool isCreating = false;

    async Task ShowEditForm(int id)
    {
        _persona = await _service.GetById(id);
        isEditing = true;
        isCreating = false;
    }

    async Task ShowCreateForm()
    {
        _persona = new Persona();
        isCreating = true;
        isEditing = false;
    }

	protected override async Task OnInitializedAsync()
	{
		_personas = await _service.GetAll();
		StateHasChanged();
	}

    async private Task eliminar(int? id)
    {
        await _service.Eliminar((int)id);
        _personas = await _service.GetAll();
    }

    private async Task SavePersona()
    {
        try
        {
            if (isCreating)
                await _service.CrearNuevo(_persona);
            else if (isEditing)
                await _service.Actualizar(_persona);

            _personas = await _service.GetAll();
            StateHasChanged();
            CancelForm();
        }
        catch (Exception ex)
        {
            
        }
    }
    private void CancelForm()
    {
        isEditing = false;
        isCreating = false;
        _persona = null;
    }
   
}
